{"version":3,"file":"static/js/300.02665467.chunk.js","mappings":"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","sources":["webpack://Social-Network/./src/components/LoginizationPage/SignIn/SignIn.module.css?7308","components/LoginizationPage/SignIn/SignIn.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"main_login\":\"SignIn_main_login__P4nwX\",\"gradient\":\"SignIn_gradient__sqF-3\",\"form_3\":\"SignIn_form_3__4VCgR\",\"button\":\"SignIn_button__w02ml\",\"label_rememberMe_block\":\"SignIn_label_rememberMe_block__pRid6\",\"clearfix\":\"SignIn_clearfix__XKm8e\",\"register\":\"SignIn_register__0tgy-\",\"text_helper\":\"SignIn_text_helper__uoPkp\",\"angle\":\"SignIn_angle__mQofl\",\"text_helper_small_text\":\"SignIn_text_helper_small_text__Q6--g\"};","import React from \"react\";\r\nimport {useFormik} from \"formik\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from \"./SignIn.module.css\";\r\nimport {ThemeType} from \"../../../App\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getAccountAuthTC} from \"../../../Thunk/Login_Thunk\";\r\nimport {RedirectToProfile} from \"../../../HOC/AuthRedirect\";\r\n\r\ntype SignInType = {\r\n    theme: ThemeType\r\n}\r\ntype FormikErrorType = {\r\n    email?: string;\r\n    password?: string;\r\n    rememberMe?: boolean\r\n};\r\n\r\nconst SignIn = ({theme}: SignInType) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const registrationForm = useFormik({\r\n        initialValues: {email: \"\", password: \"\", rememberMe: false, captcha: true},\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = \"Field is required\";\r\n            }\r\n            else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = \"Invalid email address\";\r\n            }\r\n            if (!values.password) {\r\n                errors.password = \"Password is required\";\r\n            }\r\n            else if (values.password.length < 4) {\r\n                errors.password = \"Password must be more than 4 characters\"\r\n            }\r\n            return errors;\r\n        },\r\n        onSubmit: (values) => {\r\n            dispatch(getAccountAuthTC(values));\r\n            registrationForm.resetForm();\r\n        },\r\n    });\r\n\r\n    const passwordOne = registrationForm.values.password;\r\n    const mustContainData = [\r\n        [\"заглавную букву\", passwordOne.toLowerCase() !== passwordOne],\r\n        [\"строчную букву\", passwordOne.toUpperCase() !== passwordOne],\r\n        [\"цифру\", /\\d/.test(passwordOne)],\r\n        [\"4 символов\", passwordOne.length >= 4],\r\n    ];\r\n\r\n    return (\r\n        <div className={s.main_login}>\r\n            <div className={s.modal_wrapper}>\r\n                <div className={s.modal_window}>\r\n                    <form className={s.form_3} onSubmit={registrationForm.handleSubmit}>\r\n\r\n                        <h1 style={{color: \"white\", fontWeight: \"700\"}}>Account login</h1>\r\n\r\n                        <p className={s.clearfix}>\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <input\r\n                                type=\"text\"\r\n                                id=\"email\"\r\n                                placeholder=\"email\"\r\n                                {...registrationForm.getFieldProps(\"email\")}\r\n                            />\r\n                            {registrationForm.touched.email && registrationForm.errors.email ? (\r\n                                <div style={{color: \"red\", fontSize: \"1.2rem\"}}>{registrationForm.errors.email}</div>\r\n                            ) : null}\r\n                        </p>\r\n\r\n                        <p className={s.clearfix}>\r\n                            <label htmlFor=\"password\">Password</label>\r\n                            <input\r\n                                type=\"password\"\r\n                                id=\"password\"\r\n                                placeholder=\"password\"\r\n                                {...registrationForm.getFieldProps(\"password\")}\r\n                            />\r\n                            {registrationForm.touched.password && registrationForm.errors.password ? (\r\n                                <div style={{color: \"red\", fontSize: \"1.2rem\"}}>{registrationForm.errors.password}</div>\r\n                            ) : null}\r\n                            {registrationForm.values.password ? (\r\n                                <div className={s.text_helper}>\r\n                                    <div className={s.angle}/>\r\n                                    <span>Пароль должен содержать как минимум:</span>\r\n                                    <div className={s.text_helper_small_text}>\r\n                                        {mustContainData.map((data) => (\r\n                                            <MustContainItem key={data} data={data}/>\r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n                            ) : null}\r\n                        </p>\r\n\r\n                        <p className={s.clearfix}>\r\n                            <input\r\n                                style={{width: \"50px\", height: \"50px\"}}\r\n                                type=\"checkbox\"\r\n                                id=\"remember\"\r\n                                {...registrationForm.getFieldProps(\"rememberMe\")}\r\n                            />\r\n                            <label htmlFor=\"remember\" className={s.label_rememberMe_block}>\r\n                                Remember me\r\n                            </label>\r\n\r\n                            <button\r\n                                className={s.button}\r\n                                type=\"submit\"\r\n                                name=\"submit\"\r\n                                value=\"Submit\"\r\n                                disabled={!(registrationForm.isValid && registrationForm.dirty)}\r\n                            >\r\n                                Submit\r\n                            </button>\r\n                        </p>\r\n\r\n                        <p className={s.clearfix}>\r\n                            <span className={s.register}>You don't have an account ?    SignUp !</span>\r\n                            <NavLink to=\"/signUp\">\r\n                                <button className={s.button}>\r\n                                    Create new account\r\n                                </button>\r\n                            </NavLink>\r\n                        </p>\r\n\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default RedirectToProfile(SignIn);\r\n\r\n\r\nconst MustContainItem = (props: any) => {\r\n    const {data} = props;\r\n    const label = data[0];\r\n    const meetsReq = data[1];\r\n\r\n    const setClass = () => {\r\n        const classArr = [\"invalidStyle\"]; //invalid logo img\r\n        if (meetsReq) classArr.push(\"validStyle\"); //valid logo img\r\n        return classArr.join(\" \");\r\n    };\r\n\r\n    return (\r\n        <span style={{fontWeight: \"500\", fontSize: \"1rem\"}}>\r\n      <div className={\"validateChecklist\"}>\r\n        <span>{label}</span>\r\n        <div className={setClass()}/>\r\n      </div>\r\n    </span>\r\n    );\r\n};\r\n\r\n\r\n\r\n\r\n"],"names":["RedirectToProfile","theme","dispatch","useDispatch","registrationForm","useFormik","initialValues","email","password","rememberMe","captcha","validate","values","errors","test","length","onSubmit","getAccountAuthTC","resetForm","passwordOne","mustContainData","toLowerCase","toUpperCase","className","s","handleSubmit","style","color","fontWeight","htmlFor","type","id","placeholder","getFieldProps","touched","fontSize","map","data","MustContainItem","width","height","name","value","disabled","isValid","dirty","to","props","label","meetsReq","classArr","push","join","setClass"],"sourceRoot":""}